import os
import random
import string
from xml.etree import ElementTree as ET
import requests
from celery import shared_task
from django.utils import timezone
from dotenv import load_dotenv
from .models import Domain
from .views import send_telegram_message


load_dotenv()

API_URL = "https://reestr.rublacklist.net/api/v3/domains/"
API_USER = os.getenv("API_USER")
API_KEY = os.getenv("API_KEY")
USERNAME = os.getenv("USERNAME")
CLIENT_IP = os.getenv("CLIENT_IP")


def send_domain_status_to_api(domain_name, domain_mask, status, create_domain, domain_mask_2, status_2):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Gang-Soft."""
    url = "https://api.gang-soft.com/api/take_bot_data/"
    payload = {
        "current_domain": domain_name,
        "domain_mask": domain_mask,
        "status": status,
        'current_domain_2': create_domain,
        'domain_mask_2': domain_mask_2,
        'status_2': status_2
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }

    try:
        response = requests.post(url, data=payload, headers=headers, timeout=10, verify=False)  # verify=False ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º SSL
        if response.status_code == 200:
            print(f"‚úîÔ∏è –î–æ–º–µ–Ω {domain_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–∞ {domain_name}: {e}")




def generate_random_suffix(length=3):
    return ''.join(random.choices(string.ascii_lowercase, k=length))

def get_tld_price(tld):
    params = {
        'ApiUser': API_USER,
        'ApiKey': API_KEY,
        'UserName': USERNAME,
        'Command': 'namecheap.users.getPricing',
        'ClientIp': CLIENT_IP,
        'ProductType': 'DOMAIN',
        'ProductCategory': 'REGISTER',
        'ProductName': tld
    }
    try:
        response = requests.get('https://api.namecheap.com/xml.response', params=params, timeout=15)
        root = ET.fromstring(response.content)
        price_el = root.find('.//{http://api.namecheap.com/xml.response}Price')
        if price_el is not None:
            return float(price_el.attrib.get('Price', '999'))
    except Exception:
        pass
    return 999

def check_domain_available(domain_name):
    params = {
        'ApiUser': API_USER,
        'ApiKey': API_KEY,
        'UserName': USERNAME,
        'Command': 'namecheap.domains.check',
        'ClientIp': CLIENT_IP,
        'DomainList': domain_name
    }
    try:
        response = requests.get('https://api.namecheap.com/xml.response', params=params, timeout=15)
        root = ET.fromstring(response.content)
        result = root.find('.//{http://api.namecheap.com/xml.response}DomainCheckResult')
        if result is not None:
            return result.attrib.get('Available') == 'true'
    except Exception:
        pass
    return False


def find_cheap_domain(base_name, max_price=4.0, attempts=30):
    """–ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    zones = ['com', 'net', 'org', 'xyz', 'online', 'site', 'store', 'tech', 'fun']
    for _ in range(attempts):
        suffix = generate_random_suffix()
        zone = random.choice(zones)
        domain = f"{base_name}-{suffix}.{zone}"
        price = get_tld_price(zone)
        if price <= max_price and check_domain_available(domain):
            print(f"‚úÖ –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω: {domain} –∑–∞ ${price:.2f}")
            return domain
        else:
            print(f"‚è© {domain} ‚Äî –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥–æ—Ä–æ–≥–æ–π (${price:.2f})")
    print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None


def purchase_domain(domain_name):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API Namecheap"""
    params = {
        'ApiUser': API_USER,
        'ApiKey': API_KEY,
        'UserName': USERNAME,
        'Command': 'namecheap.domains.create',
        'ClientIp': CLIENT_IP,
        'DomainName': domain_name,
        'Years': 1,
        'RegistrantFirstName': 'Ivan',
        'RegistrantLastName': 'Ivanov',
        'RegistrantAddress1': 'Lenina 1',
        'RegistrantCity': 'Minsk',
        'RegistrantStateProvince': 'Minsk',
        'RegistrantPostalCode': '111',
        'RegistrantCountry': 'BY',
        'RegistrantPhone': '+375.291234567',
        'RegistrantEmailAddress': 'kasyadounar@gmail.com',
        'RegistrantOrganizationName': 'Company Inc.',
        'RegistrantJobTitle': 'CEO',
        'TechFirstName': 'Ivan',
        'TechLastName': 'Ivanov',
        'TechAddress1': 'Lenina 1',
        'TechCity': 'Minsk',
        'TechStateProvince': 'Minsk',
        'TechPostalCode': '111',
        'TechCountry': 'BY',
        'TechPhone': '+375.291234567',
        'TechEmailAddress': 'tech@example.com',
        'TechOrganizationName': 'TechCorp',
        'TechJobTitle': 'CTO',
        'AdminFirstName': 'Ivan',
        'AdminLastName': 'Ivanov',
        'AdminAddress1': 'Lenina 1',
        'AdminCity': 'Minsk',
        'AdminStateProvince': 'Minsk',
        'AdminPostalCode': '111',
        'AdminCountry': 'BY',
        'AdminPhone': '+375.291234567',
        'AdminEmailAddress': 'admin@example.com',
        'AdminOrganizationName': 'AdminCorp',
        'AdminJobTitle': 'Administrator',
        'AuxBillingFirstName': 'John',
        'AuxBillingLastName': 'Doe',
        'AuxBillingAddress1': 'Main St 123',
        'AuxBillingCity': 'Minsk',
        'AuxBillingStateProvince': 'Minsk',
        'AuxBillingPostalCode': '222',
        'AuxBillingCountry': 'BY',
        'AuxBillingPhone': '+375.291234567',
        'AuxBillingEmailAddress': 'billing@example.com',
        'AddFreeWhoisguard': 'no',
        'WGEnabled': 'no',
        'IsPremiumDomain': 'false',
        'PremiumPrice': '0',
        'EapFee': '0',
        'GenerateAdminOrderRefId': 'False',
    }

    try:
        response = requests.get('https://api.namecheap.com/xml.response', params=params, timeout=60)
        print(f"üì® –û—Ç–≤–µ—Ç Namecheap (raw):\n{response.text}")  # ‚Üê –≥–ª–∞–≤–Ω–æ–µ

        root = ET.fromstring(response.content)

        # üî• –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        error_el = root.find('.//{http://api.namecheap.com/xml.response}Error')
        if error_el is not None:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Namecheap: {error_el.text}")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–±–æ—Ä
        result = root.find('.//{http://api.namecheap.com/xml.response}DomainCreateResult')
        if result is not None:
            print("‚öôÔ∏è –ù–∞—à—ë–ª —ç–ª–µ–º–µ–Ω—Ç DomainCreateResult")
            print(f"‚û°Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã: {result.attrib}")
            if result.attrib.get('Registered') == 'true':
                print(f"‚úÖ –î–æ–º–µ–Ω {domain_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                return True
            else:
                print(f"‚ùå –î–æ–º–µ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {result.attrib}")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç DomainCreateResult")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ {domain_name}: {e}")

    return False


def create_cloudflare_zone(domain_name: str) -> list[str] | None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –≤ Cloudflare –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ NS"""
    headers = {
        "X-Auth-Email": "odin.vin@yandex.ru",
        "X-Auth-Key": "625a435d54464faa61c5fdf7360adade9e828",
        "Content-Type": "application/json",
    }
    data = {
        "name": domain_name,
        "jump_start": True,
    }

    try:
        response = requests.post(
            "https://api.cloudflare.com/client/v4/zones",
            json=data,
            headers=headers,
            timeout=15
        )
        if response.status_code == 200:
            res_json = response.json()
            if res_json.get("success"):
                nameservers = res_json["result"].get("name_servers")
                print(f"‚úÖ –ó–æ–Ω–∞ {domain_name} —Å–æ–∑–¥–∞–Ω–∞. NS: {nameservers}")
                return nameservers
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—É: {res_json}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–æ–Ω—ã: {response.status_code} ‚Äî {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Cloudflare: {e}")
    return None


def set_nameservers(domain_name, ns1, ns2):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NS –¥–ª—è –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API Namecheap"""
    sld, tld = domain_name.split('.')  # —Ä–∞–∑–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω
    params = {
        'ApiUser': API_USER,
        'ApiKey': API_KEY,
        'UserName': USERNAME,
        'Command': 'namecheap.domains.dns.setCustom',
        'ClientIp': CLIENT_IP,
        'SLD': sld,
        'TLD': tld,
        'Nameservers': f"{ns1},{ns2}"
    }

    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É NS –¥–ª—è {domain_name}: {ns1}, {ns2}")
    print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    try:
        response = requests.get('https://api.namecheap.com/xml.response', params=params, timeout=15)
        print(f"üì® –û—Ç–≤–µ—Ç –æ—Ç Namecheap (—Å–º–µ–Ω–∞ NS):\n{response.text}")

        root = ET.fromstring(response.content)
        result = root.find('.//{http://api.namecheap.com/xml.response}DomainDNSSetCustomResult')
        if result is not None:
            if result.attrib.get('Updated') == 'true':
                print(f"‚úÖ NS –¥–ª—è {domain_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                return True
            else:
                print(f"‚ùå NS –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {result.attrib}")
        else:
            print("‚ùå –≠–ª–µ–º–µ–Ω—Ç DomainDNSSetCustomResult –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ NS: {e}")
    return False


@shared_task
def check_domain_availability():
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–æ–≤ (HTTP 200), —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    print(">>> –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–æ–≤")
    domains = Domain.objects.filter(is_active=True)
    print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {domains.count()}")

    result_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    for domain in domains:
        try:
            response = requests.get(f"http://{domain.name}", timeout=5)
            accessible = response.status_code == 200
        except requests.exceptions.RequestException:
            accessible = False

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ - —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        status_text = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç" if accessible else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
        result_messages.append(f"{status_text}: {domain.name}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
        if accessible != domain.is_accessible:
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞ {domain.name} —Å {domain.is_accessible} –Ω–∞ {accessible}")
            domain.is_accessible = accessible
            domain.last_checked = timezone.localtime()
            domain.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if result_messages:
        send_telegram_message("\n".join(result_messages))


@shared_task
def check_api_blocked_domains():
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ API (—Ä–µ–µ—Å—Ç—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö), —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    response = requests.get(API_URL, timeout=10)
    if response.status_code != 200:
        send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.")
        return
    # –û—á–∏—Å—Ç–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫
    blocked_domains = set(domain.strip('\"') for domain in response.json())  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ —Å –¥–æ–º–µ–Ω–æ–≤
    domains = Domain.objects.filter(is_active=True)
    result_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for domain in domains:
        is_blocked = domain.name in blocked_domains
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ - —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        status_text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –†–ö–ù" if is_blocked else "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –≤ –†–ö–ù"
        result_messages.append(f"{status_text}: {domain.name}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
        if is_blocked != domain.is_blocked_api:
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞ {domain.name} —Å {domain.is_accessible} –Ω–∞ {is_blocked}")
            domain.is_blocked_api = is_blocked
            domain.last_checked = timezone.localtime()
            domain.save()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if result_messages:
        send_telegram_message("\n".join(result_messages))




@shared_task
def check_api_blocked_domains_pay_now_domain():
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ API (—Ä–µ–µ—Å—Ç—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö), —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    response = requests.get(API_URL, timeout=10)
    if response.status_code != 200:
        send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.")
        return
    # –û—á–∏—Å—Ç–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫
    blocked_domains = set(domain.strip('\"') for domain in response.json())  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ —Å –¥–æ–º–µ–Ω–æ–≤
    domains = Domain.objects.filter(is_active=True, is_blocked_api=True, pay_domains=False)
    result_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for domain in domains:
        is_blocked = domain.name in blocked_domains
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å–∫—É –¥–æ–º–µ–Ω–∞
        domain_mask = "1win" if "1win" in domain.name.lower() else "pokerdom" if "pokerdom" in domain.name.lower() else domain.name
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ - —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        status_text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –†–ö–ù" if is_blocked else "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –≤ –†–ö–ù"
        result_messages.append(f"{status_text}: {domain.name}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
        if is_blocked != domain.is_blocked_api:
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞ {domain.name} —Å {domain.is_accessible} –Ω–∞ {is_blocked}")
            domain.is_blocked_api = is_blocked
            domain.last_checked = timezone.localtime()
            domain.pay_domains = True
            domain.save()
            #–ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            create_domain = find_cheap_domain(base_name=domain_mask)
            #–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API Namecheap
            purchase_domain(domain_name=create_domain)
            #–°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –≤ Cloudflare –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ NS
            nameservers = create_cloudflare_zone(domain_name=create_domain)
            if nameservers:
                #–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NS –¥–ª—è –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API Namecheap
                set_nameservers(create_domain, nameservers[0], nameservers[1])
            if is_blocked:
                #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Gang-Soft
                send_domain_status_to_api(domain_name=domain.name, domain_mask=domain_mask, status="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                                          create_domain=create_domain, domain_mask_2=domain_mask, status_2="–ù–µ –ê–∫—Ç–∏–≤–µ–Ω")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if result_messages:
        send_telegram_message("\n".join(result_messages))



def test_check_one_domain(domain_name):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ (–∫–∞–∫ –≤ –ø—Ä–æ–¥–µ, —Å –ø–æ–∫—É–ø–∫–æ–π –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)."""
    response = requests.get(API_URL, timeout=10)
    if response.status_code != 200:
        send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.")
        return

    blocked_domains = set(domain.strip('\"') for domain in response.json())

    try:
        domain = Domain.objects.get(name=domain_name)
    except Domain.DoesNotExist:
        print(f"‚ùå –î–æ–º–µ–Ω {domain_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        return

    is_blocked = domain.name in blocked_domains
    domain_mask = (
        "1win" if "1win" in domain.name.lower()
        else "pokerdom" if "pokerdom" in domain.name.lower()
        else domain.name
    )

    status_text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –†–ö–ù" if is_blocked else "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –≤ –†–ö–ù"
    print(f"{status_text}: {domain.name}")

    if is_blocked != domain.is_blocked_api:
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞ {domain.name} —Å {domain.is_blocked_api} –Ω–∞ {is_blocked}")
        domain.is_blocked_api = is_blocked
        domain.last_checked = timezone.localtime()
        domain.save()

        create_domain = find_cheap_domain(base_name=domain_mask)
        print(create_domain)
        a = purchase_domain(domain_name=create_domain)
        print(a)
        nameservers = create_cloudflare_zone(domain_name=create_domain)
        print("nameservers:", nameservers)
        if nameservers:
            set_nameservers(create_domain, nameservers[0], nameservers[1])
        if is_blocked:
            send_domain_status_to_api(
                domain_name=domain.name,
                domain_mask=domain_mask,
                status="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                create_domain=create_domain,
                domain_mask_2=domain_mask,
                status_2="–ê–∫—Ç–∏–≤–µ–Ω")
    send_telegram_message(f"{status_text}: {domain.name}")
