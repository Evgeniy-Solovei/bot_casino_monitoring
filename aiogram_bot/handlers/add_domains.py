from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import Message
from django.utils.timezone import now
import re
from bot.tasks import check_domain_availability, check_api_blocked_domains
from bot.models import Domain
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


router = Router()
DOMAIN_REGEX = re.compile(r"^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddDomainsState(StatesGroup):
    waiting_for_domains = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–æ–º–µ–Ω–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_domains
@router.message(Command("add_domains"))
async def add_domains_command(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–æ–º–µ–Ω–æ–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏ (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)."
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await state.set_state(AddDomainsState.waiting_for_domains)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–æ–º–µ–Ω–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–∞
@router.message(AddDomainsState.waiting_for_domains, F.text | F.document)
async def process_domains_input(message: Message, state: FSMContext):
    domains_to_add = set()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç
    if message.text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        domains_to_add = {d.strip().lower() for d in message.text.split() if DOMAIN_REGEX.match(d.strip())}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª
    elif message.document:
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        # –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
        domains_to_add = {line.strip().lower() for line in file_content.read().decode("utf-8").splitlines() if DOMAIN_REGEX.match(line.strip())}

    # –ï—Å–ª–∏ –¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    if not domains_to_add:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω.")
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –ò—â–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    existing_domains = set()
    async for domain in Domain.objects.filter(name__in=domains_to_add).aiterator():
        existing_domains.add(domain.name)

    new_domains = domains_to_add - existing_domains

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
    if new_domains:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º abulk_create –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
        await Domain.objects.abulk_create([Domain(name=d, last_checked=now()) for d in new_domains])
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–º–µ–Ω—ã:\n" + "\n".join(new_domains))
    else:
        await message.answer("‚ö†Ô∏è –í—Å–µ –¥–æ–º–µ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –ë–î.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    check_domain_availability.delay()
    check_api_blocked_domains.delay()
    await message.answer("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤...")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
